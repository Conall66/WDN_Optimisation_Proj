
import networkx as nx
import numpy as np
from scipy.spatial import distance_matrix
import matplotlib.pyplot as plt

def generate_complete_graph(demand_nodes):
    dist_matrix = distance_matrix(demand_nodes, demand_nodes)
    G = nx.Graph()
    for i in range(len(demand_nodes)):
        for j in range(i + 1, len(demand_nodes)):
            dist = dist_matrix[i][j]
            G.add_edge(i, j, weight=dist)
    return G

def build_initial_tree(G, budget):
    mst = nx.minimum_spanning_tree(G, weight='weight')
    total_cost = sum(d['weight'] for u, v, d in mst.edges(data=True))
    if total_cost > budget:
        raise ValueError(f"Cannot construct MST within budget: required {total_cost}, budget {budget}")
    return mst, total_cost

def add_redundant_edges(G_full, tree, budget, current_cost):
    added_edges = []
    remaining_budget = budget - current_cost

    candidate_edges = sorted(
        set(G_full.edges()) - set(tree.edges()),
        key=lambda e: G_full.edges[e]['weight']
    )

    for u, v in candidate_edges:
        weight = G_full[u][v]['weight']
        if weight <= remaining_budget:
            tree.add_edge(u, v, weight=weight)
            added_edges.append((u, v))
            remaining_budget -= weight

    return tree, added_edges

def optimize_water_network(demand_nodes, budget):
    G_full = generate_complete_graph(demand_nodes)
    tree, used_budget = build_initial_tree(G_full, budget)
    plot_network(tree, demand_nodes, title="Initial Minimum Spanning Tree")

    tree, added_loops = add_redundant_edges(G_full, tree, budget, used_budget)
    plot_network(tree, demand_nodes, title="Optimized Water Distribution Network")

    return tree

def plot_network(G, demand_nodes, title="Water Distribution Network"):
    pos = {i: demand_nodes[i] for i in range(len(demand_nodes))}
    plt.figure(figsize=(8, 6))
    nx.draw(G, pos, with_labels=True, node_color='skyblue', edge_color='gray', node_size=500)
    labels = nx.get_edge_attributes(G, 'weight')
    nx.draw_networkx_edge_labels(G, pos, edge_labels={e: f"{w:.1f}" for e, w in labels.items()})
    plt.title(title)
    plt.show()

# === Example Usage ===
if __name__ == "__main__":
    np.random.seed(5)
    demand_nodes = np.random.rand(10, 2) * 100  # 10 demand nodes in 100x100 space
    budget = 300  # Adjust based on node distances

    try:
        G_optimized = optimize_water_network(demand_nodes, budget)
        # plot_network(G_optimized, demand_nodes)
    except ValueError as e:
        print(f"Error: {e}")
