
"""

This is the main file for the DRL pipe sizing project. It trains the agent on a variety of different smaller networks (looped or branched) with autogenerated source node placement (reservoir), junctions, and tanks. Pipes are added with random diameters and roughness values.

The agent evaluates the reward, for each branch of the network in each time step, of upgrading the pipe for the current and (probabilistic) future states of the network. Future demand profiles are generated at each time step to simulate an evolving city over 20 years (20 * 12 steps).

Different SSP scenarios are generated (low supply/high demand, avg. supply/ avg. demand, high supply/low demand) to train different agents.

These models are then tested on a range of networks (small vs large networks, deep vs shallow uncertainty, branched vs looped), and results compared to the GA alternative approach in terms on computing time, 

"""

# import libraries
import os
import sys
import wntr
import torch
import gym
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn

# Import functions from other files

from Generate_Analyse import generate_water_network, convert_to_wntr_model, run_hydraulic_simulation, evaluate_network_performance, visualise_network

# Initial environment setup

# Step 1: Generate a random water distribution network
G, pos = generate_water_network(num_nodes=10, connection_probability=0.15)

"""Modify the generate water network function to take branched vs looped as input parameters"""

# Step 2: Convert to WNTR model
wn = convert_to_wntr_model(G, pos)

# Step 3: Run hydraulic simulation
success, results = run_hydraulic_simulation(wn)

# Step 4: Evaluate network performance
metrics = evaluate_network_performance(wn, results)

# Print metrics
print("\nNetwork Performance Metrics:")
print("=" * 30)
for key, value in metrics.items():
    print(f"{key}: {value}")

# Step 5: Visualise the network
print("\nVisualising network...")
visualise_network(G, pos, results)
